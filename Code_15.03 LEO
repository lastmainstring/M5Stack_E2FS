#include <M5Stack.h>
#include <Unit_Sonic.h>
#include <WiFi.h>
#include <Adafruit_MQTT.h>
#include <Adafruit_MQTT_Client.h>
#include <Adafruit_NeoPixel.h> // Library for internal LED strip

const char* ssid = "HWS-IOT";
const char* password = "*HWSFI#2024";

const char* mqtt_server = "mqtt-broker.zdw31.cloud";
const int mqtt_port = 1883;
const char* mqtt_username = "user1";
const char* mqtt_password = "HWSFI2024!";
const char* mqtt_topic = "distance";

WiFiClient client;
Adafruit_MQTT_Client mqtt(&client, mqtt_server, mqtt_port, mqtt_username, mqtt_password);

SONIC_I2C sensor;
Adafruit_MQTT_Publish distancePub = Adafruit_MQTT_Publish(&mqtt, mqtt_topic);

const int graphHeight = 160; // Decreased graph height
const int maxDataPoints = 300; // Increase number of data points
int dataPoints[maxDataPoints] = {0};
int dataIndex = 0;
unsigned long lastUpdate = 0; // Last time the screen was updated
const int updateInterval = 1000; // Update interval in milliseconds

const int motionSensorPin = 39; // GPIO Pin for motion sensor
const int ledPin = 15; // Internal LED strip pin

Adafruit_NeoPixel pixels = Adafruit_NeoPixel(1, ledPin, NEO_GRB + NEO_KHZ800);

void MQTT_connect() {
  int8_t ret;
  Serial.print("Connecting to MQTT... ");
  uint8_t retries = 3;
  while ((WiFi.status() != WL_CONNECTED) && (retries > 0)) {
    WiFi.begin(ssid, password);
    Serial.println("Attempting to connect to Wi-Fi...");
    delay(5000);
    retries--;
  }

  if (retries == 0) {
    Serial.println("Failed to connect to Wi-Fi");
    return;
  }

  Serial.println("Wi-Fi connected");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

  Serial.println("Connecting to MQTT...");
  retries = 3;
  while ((ret = mqtt.connect()) != 0 && retries > 0) {
    Serial.println(mqtt.connectErrorString(ret));
    Serial.println("Retrying MQTT connection in 5 seconds...");
    delay(5000);
    retries--;
  }

  if (retries == 0) {
    Serial.println("Failed to connect to MQTT");
    return;
  }

  Serial.println("MQTT Connected!");
}

void setup() {
  M5.begin();
  sensor.begin();
  pixels.begin(); // Initialize internal LED strip
  pinMode(motionSensorPin, INPUT);
  Serial.begin(9600);

  // Connect to Wi-Fi and MQTT
  MQTT_connect();

  // Setup screen
  M5.Lcd.fillScreen(BLACK);
  M5.Lcd.setTextFont(1);
  M5.Lcd.setTextSize(2);
  M5.Lcd.setTextColor(WHITE);
}

void updateGraph(float value) {
  dataPoints[dataIndex] = map(value, 0, 2000, 0, graphHeight);
  dataIndex = (dataIndex + 1) % maxDataPoints;

  M5.Lcd.fillRect(0, 100, maxDataPoints, graphHeight, BLACK); // Adjust position and size of graph
  for (int i = 0; i < maxDataPoints - 1; i++) {
    M5.Lcd.drawLine(i, 100 + graphHeight - dataPoints[(dataIndex + i) % maxDataPoints], i + 1, 100 + graphHeight - dataPoints[(dataIndex + i + 1) % maxDataPoints], GREEN); // Adjust position of graph
  }
}

void loop() {
  if (!mqtt.connected()) {
    MQTT_connect();
  }

  unsigned long currentMillis = millis();

  if (currentMillis - lastUpdate >= updateInterval) {
    float distance = sensor.getDistance();
    if (distance >= 0 && distance <= 2000) {
      // Publish distance to MQTT if within valid range
      distancePub.publish(distance);
      Serial.println("Published distance: " + String(distance) + "mm");
    } else {
      Serial.println("Invalid distance value: " + String(distance));
    }

    // Update graph regardless of MQTT publishing
    updateGraph(distance);

    // Clear previous distance value and display current distance
    M5.Lcd.fillRect(0, 0, 320, 20, BLACK);
    M5.Lcd.setCursor(0, 0);
    M5.Lcd.print("C"); // Display "C" if both WiFi and MQTT are connected
    M5.Lcd.print(String(M5.Power.getBatteryLevel()) + "% ");
    M5.Lcd.print("Distance: ");
    M5.Lcd.print(distance);
    M5.Lcd.print(" mm");

    // Check motion sensor
    if (digitalRead(motionSensorPin) == HIGH) {
      // Turn on internal LED strip if motion detected
      pixels.setPixelColor(0, pixels.Color(0, 255, 0)); // Green color
    } else {
      // Turn off internal LED strip if no motion
      pixels.setPixelColor(0, pixels.Color(0, 0, 0)); // Turn off LED
    }
    pixels.show();

    // Display connection status on serial monitor
    Serial.print("WiFi:");
    if (WiFi.status() == WL_CONNECTED) {
      Serial.print("Connected ");
    } else {
      Serial.print("Disconnected ");
    }

    Serial.print("MQTT:");
    if (mqtt.connected()) {
      Serial.println("Connected ");
    } else {
      Serial.println("Disconnected ");
    }

    lastUpdate = currentMillis;
  }
}
